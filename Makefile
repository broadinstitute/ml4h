SHELL := bash
.ONESHELL:
ENV_RUN := conda run -n ml4cvd
PIP_RUN := ${cr} pip

ifeq ($(origin .RECIPEPREFIX), undefined)
> $(error This Make does not support .RECIPEPREFIX. Please use GNU Make 4.0 or later)
endif
.RECIPEPREFIX = >

.PHONY: help, \
> setup, \
> create_env, \
> update_env, \
> save_env, \
> install_hooks, \
> install_self \
> lint_staged \
> lint_all \
> clean
#> test \
#> test_arg_parser


help:
> @echo
> @echo "ML4CVD Makefile commands"
> @echo
> @echo "setup       -- creates and sets up the conda environment: installs packages from environment.yml and installs git commit hooks."
> @echo
> @echo "update_env  -- reinstalls packages from environment.yml and reinstalls git hooks"
> @echo
> @echo "save_env    -- freezes current conda dependencies and saves them in environment.yml"
> @echo
> @echo "clean       -- cleans autogenerated files like cache"
> @echo
> @echo "lint_staged -- lints files staged for commit"
> @echo
> @echo "lint_all    -- lints all files"
> @echo
#> @echo "TESTING"
#> @echo
#> @echo "\t test> > >  run all the tests"
#> @echo

setup:
> @echo Setting up the repo...
> $(MAKE) create_env
> ${ENV_RUN} $(MAKE) install_self
> ${ENV_RUN} $(MAKE) install_hooks

create_env:
> @echo Creating environment from environment.yml...
> @conda env create -f environment.yml

update_env:
> @echo Updating environment from environment.yml...
> @conda env update -f environment.yml
> $(MAKE) install_self install_hooks

save_env:
> @echo Saving Conda & Pip packages to environment.yml...
> @conda env export --from-history | cut -f -2 -d "=" | grep -v "prefix" > environment.yml

install_hooks:
> @echo Installing precommit hooks...
> @pre-commit install
> @pre-commit install --hook-type commit-msg

install_self:
> @echo Installing ml4cvd via pip...
> @pip install -e .

clean:
> @echo Cleaning files...
> @rm -rf test.py .mypy_cache ml4cvd.egg-info .empty .pytest_cache build

lint_staged:
> @echo Running hook with staged files...
> @pre-commit run

lint_all:
> @echo Running hook on all files...
> @pre-commit run --all-files

#test:
#> @python3 -m pytest -vvs tests --ignore tests/arg_parser
#
#test_arg_parser:
#> @python3 -m pytest -vvs tests/arg_parser
